* Git의 목적

1) Version
2) Backup
3) Collaborate

* Version
-Git을 사용하지 않고 버전관리
메모장, 소스코드, 이미지 파일 등..
작업을 위한 처음 파일을 만들면 버전은 1.0이 된다.
하지만 작업된 것이 폐기되어 예전 버전으로 돌아게 될 수도 있다.
=> 그럴때는 현재 파일을 삭제하고 이전 버전 내용으로 돌아간다.
-> 복잡하지 않은 개인작업이라면 이 방법이 낫다. 하지만 여러 사람이 같이 하는 프로젝트라면?

-Git을 이용한 버전관리
저장소를 만들면 .git이라는 directory안에 버전관리를 위해 필요한 내용이 저장된다.
만들어진 저장소에 작업한 파일이 들어가면(버전이 바뀌면), 작업했던 내용을 Commit할 수 있다. 또한 파일을 수정할때도 Commit할 수 있다.
버전별 작업한 내용을 전반적으로 쉽게 보여준다.

버전은 꼭 한 작업에 하나만 있는것은 아니다. 한 버전의 여러 작업을 할 수 있도록 Git이 관리해줄 수 있다.(파일을 Grouping 해준다)

또한 Git은 이전 버전으로 파일들을 되돌려줄 수 있다.


* Backup
Git에 했던 버전 내용들을 원격으로 저장해준다. (원격 저장 장소)
=> 그 저장 장소는 자기의 컴퓨터가 될 수도 있고, 그것을 제공하는 회사 컴퓨터가 될 수도 있다. (Push라고 한다) (업로드)
=> 원격 저장 장소에 있는 현재 버전을 원하는 컴퓨터에 받아온다. (Pull이라고 한다) 


* Collaborate(협업)
my, other의 버전 관리를 하며, 위에서 살펴본 pull, push를 하면서 협업이 진행된다. 서로 중복되는 위치를 수정하는 경우, 그것을 정리해주거나 작업한 내용을 합쳐주는 역할을 한다. (merge) 덮어쓰기 하는 문제를 절대로 하지 않도록 해주는 역할을 한다.


-Git의 종류 
Git은 제품군이다. 특정한 제품이 아님.
Github 같은 경우 Git을 이용해 더 쉽게 사용할 수 있도록 해주는 역할을 한다.
1) Github
2) TortoiseGit
3) SourceTree

git log, git status, git commit

